# Graceful shutdown

Introduction to the context package and graceful shutdown in go applications
23 April 2021

Tobias Brumhard
tobias.brumhard@mail.schwarz

## structure

.play structure.go /START OMIT/,/END OMIT/

## select statement

_"The select statement lets a goroutine wait on multiple communication operations."_

.play -edit select.go /^func main/,/^}/

: go func() {
:     somec <- struct{}{}
: }()

## context package

_"Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes."_

.play -edit ctx.go /^func main/,/^}/

: - context of a request
: - use cases (for example for goroutines): cancellation, timeouts/ deadlines, request values (key value)
: - in this case: cancellation (needed for graceful shutdown)
: - safe to use in multiple goroutines in parallel
:
: case <-r.Context().Done():
:     log.Print("done")
:     return

## signals

- limited form of inter-process communication
- notify a process/ thread of an event anynchronously
- examples:
  - `Ctrl+C`
  - container termination
  - `kill -9 xxx` / `kill -s KILL xxx`

## main()

: purpose of graceful shutdown -> listening to a cancellation request, leave in a clean state (.e.g web requests)
: becomes more important in context of e.g. kubernetes
: or clis that start long running process

## func main - structure

.code example_structure.go

## func main - initialization

context initialization:

.code -numbers example.go /CTX START OMIT/,/CTX END OMIT/

: this time not getting the context from request but creating a new one
: context.Background() creates empty context -> no timeout
: with cancel returns a function to cancel the context

signal initialization:

.code -numbers example.go /SIG START OMIT/,/SIG END OMIT/

: SIGINT is for commandline ctrl-C
: SIGTERM is for container shutdown kubernetes

## func main - handling and execution

signal handling:

.code -numbers example.go /HANDLE START OMIT/,/HANDLE END OMIT/

run():

.code -numbers example.go /RUN START OMIT/,/RUN END OMIT/

## func run

.code -numbers example.go /^func run/,/^}/

: sync.WaitGroup basically like counter

##

.image go_demo.gif
.caption Golang mascot by Kirael-Art

## http example

.code -numbers example.go /^func http_run/,/^}/
